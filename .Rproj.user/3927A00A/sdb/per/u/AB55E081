{
    "contents" : "###############################################################################\n## Plotting your network of Facebook friends using igraph and ggplot2\n## Author: Pablo Barber√°\n## Data Visualization with R and ggplot2\n## October 15th 2013\n## The idea for this script was inspired by Moritz Marbach (Manheim):\n## http://sumtxt.wordpress.com/2011/07/02/visualizing-networks-with-ggplot2-in-r\n###############################################################################\n\n## loading libraries\nlibrary(Rfacebook)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(grid)\nlibrary(igraph)\n\n# downloading adjancency matrix for network of Facebook friends\n# (get your token from 'https://developers.facebook.com/tools/explorer/')\n# (make sure you give permissions to access your list of friends)\ntoken <- 'CAACEdEose0cBANzBnp6PahtHIWKE25ZBHleZBAigwknH0nptHOa9B2e4Nt967L0B3GfqZCgXcpW7140UVTOjbJ3K3LQcS2zseDFrt6khifHOuZCbfZBZCUw74f6b8jy3QZBCWn9fS285EGPQvgRXdhsBuv4SkoKuEkhVAlJHCfdhlo9p15wpH5gQoTYUrbNHiwUSNNgWAMZAGBPzoeCmX5VZBhpgiAxLabzcZD'\nmat <- getNetwork(token, format=\"adj.matrix\")\n\n# preparing node list and layout with igraph\nnetwork <- graph.adjacency(mat, mode=\"undirected\") ## igraph object\nfc <- fastgreedy.community(network) ## communities / clusters\nset.seed(123)\nl <- layout.fruchterman.reingold(network, niter=1000, coolexp=0.5) ## layout\n\n# checking who is in each cluster\ncl <- data.frame(name = fc$names, cluster = fc$membership, stringsAsFactors=F)\ncl <- cl[order(cl$cluster),]\ncl[cl$cluster==1,]\n\n# preparing data for plot\nd <- data.frame(l); names(d) <- c(\"x\", \"y\")\nd$cluster <- factor(fc$membership)\n\n# plot with only nodes, colored by cluster\np <- ggplot(d, aes(x=x, y=y, color=cluster))\npq <- p + geom_point()\npq\n\n## too many clusters! let's pick just those with 10 friends or more\nlarge.clusters <- which(table(fc$membership)>=10)\nfc$membership[fc$membership %in% large.clusters == FALSE] <- \"Others\"\nd$cluster <- factor(fc$membership)\n\n# plot with only nodes, colored by cluster\np <- ggplot(d, aes(x=x, y=y, color=cluster))\npq <- p + geom_point()\npq\n\n## let's simplify even further by keeping only nodes in giant component\ncl <- clusters(network)\ngc <- which(cl$membership == 1)\nmat <- mat[gc, gc]\n\nnetwork <- graph.adjacency(mat, mode=\"undirected\") ## igraph object\nfc <- fastgreedy.community(network) ## communities / clusters\nset.seed(123)\nl <- layout.fruchterman.reingold(network, niter=1000, coolexp=0.5) ## layout\nd <- data.frame(l); names(d) <- c(\"x\", \"y\")\nd$cluster <- factor(fc$membership)\n\np <- ggplot(d, aes(x=x, y=y, color=cluster))\npq <- p + geom_point()\npq\n\n## now let's add the edges\nedgelist <- get.edgelist(network, names=FALSE)\nedges <- data.frame(d[edgelist[,1],c(\"x\", \"y\")], d[edgelist[,2],c(\"x\", \"y\")])\nnames(edges) <- c(\"x1\", \"y1\", \"x2\", \"y2\")\n\npq <- pq + geom_segment(\n        aes(x=x1, y=y1, xend=x2, yend=y2), \n        data=edges, size=0.25, color=\"grey\", alpha=1/3)\npq\n\n## (note that the order matters!)\n\np <- ggplot(d, aes(x=x, y=y, color=cluster))\npq <- p + geom_segment(\n        aes(x=x1, y=y1, xend=x2, yend=y2), \n        data=edges, size=0.25, color=\"grey\", alpha=1/3) +\n        geom_point()\npq\n\n## change a few of the theme options to make it look better\npq <- pq + theme(\n        # dark background\n        panel.background = element_rect(fill = \"black\"),\n        plot.background = element_rect(fill=\"black\"),\n        # removing axis lines and ticks\n        axis.line = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), \n        axis.title = element_blank(), panel.border = element_blank(), \n        panel.grid.major = element_blank(), panel.grid.minor = element_blank()\n)\npq\n\n## now let's customize the legend\npq <- pq + theme(\n        # dark background to legend\n        legend.background = element_rect(colour = \"white\", fill = \"black\"),\n        legend.key = element_rect(fill = \"black\", colour = F),\n        # text and border in white\n        legend.title = element_text(color=\"white\"),\n        legend.text = element_text(color=\"white\")\n)\npq\n\n## let's also improve the labels by identifying most central node within\n## each community (using degree as measure of centrality) and adding labels\n## based on what we learn from that\nd$degree <- degree(network)\nwhich.max(degree(network)) ## who do I have more friends in common with?\ncentral.nodes <- lapply(communities(fc), function(x) x[which.max(d$degree[x])])\ncentral.names <- fc$names[unlist(central.nodes)] ## names of central nodes\n## within each cluster\n\n## labels I give to each cluster\nlabels <- c(\"NYU\", \"EUI\", \"College\", \"Grad School\", \"Caixa Fellow\", \"NYC\", \"Others\")\npq <- pq + scale_color_discrete(labels=labels)\npq\n\n## we can also add the labels to the plot\nd$label <- NA\nd$label[unlist(central.nodes)] <- labels\n\npq <- pq + geom_text(aes(x=x, y=y, label=label), data=d, color=\"white\", size=3)\npq ## let's forget about it for now...\n\n\n## let's put it all together, with some final touches on how points look\np <- ggplot(d, aes(x=x, y=y, color=cluster))\npq <- p + geom_segment(\n        aes(x=x1, y=y1, xend=x2, yend=y2), \n        data=edges, size=0.25, color=\"white\", alpha=1/3) +\n        ## note that here I add a border to the points\n        geom_point(color=\"grey20\", aes(fill=cluster), shape=21, size=2) +\n        scale_fill_discrete(labels=labels) +\n        theme(\n                panel.background = element_rect(fill = \"black\"),\n                plot.background = element_rect(fill=\"black\"),\n                axis.line = element_blank(), axis.text = element_blank(), \n                axis.ticks = element_blank(), \n                axis.title = element_blank(), panel.border = element_blank(), \n                panel.grid.major = element_blank(), \n                panel.grid.minor = element_blank(),\n                legend.background = element_rect(colour = F, fill = \"black\"),\n                legend.key = element_rect(fill = \"black\", colour = F),\n                legend.title = element_text(color=\"white\"),\n                legend.text = element_text(color=\"white\")\n        ) +\n        ## changing size of points in legend\n        guides(fill = guide_legend(override.aes = list(size=5)))\n\npq\n\nggsave(pq, file=\"plots/network_plot_final.pdf\", height=4, width=6)",
    "created" : 1414311045666.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "2004631977",
    "id" : "AB55E081",
    "lastKnownWriteTime" : 21392300099829876,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}